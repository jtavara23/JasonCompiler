options 
{
IGNORE_CASE = true ;
} 
PARSER_BEGIN(Tester)
import java.io.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Tester {

	public final static tabelaSimbolos ts = new tabelaSimbolos();
	public static ArrayList<String> palavrasReservadas = new ArrayList<String>();
	public static ArrayList<String> tipoPrimitivo = new ArrayList<String>();
	public static ArrayList<ArrayList<String>> P = new ArrayList<ArrayList<String>>();
	public static Map<String, Map<Integer,Integer > > posVariaveis = new HashMap<String, Map<Integer,Integer > >();
	public static Map<String, String> funtionLabels = new HashMap<String, String>();
	public static int contLabel = 0;
	public static int flag = 0;
	public static int nivel = 0;
	public static int actualVar = 0;
	public static int actualParam = -3;
	public static int indiceParametro = 0;
	public static ArrayList<String> cmd;
	public static ArrayList<String> ids = new ArrayList<String>();
	public static ArrayList<Integer> dmem = new ArrayList<Integer>();
	public static ArrayList<String> parametros = new ArrayList<String>();

	public static boolean isInteger(String str){
		try {
        	Integer.parseInt(str);
        	return true;
    	} catch (NumberFormatException nfe) {}
    	return false;	
	}
	public static boolean isReal(String str){
		try {
        	Double.parseDouble(str);
        	return true;
    	} catch (NumberFormatException nfe) {}
    	return false;

	}
	public static boolean isString(String str){
		if(str.charAt(0) == '\'')
			return true;
		return false;
	}

	static public void main(String args[]) {
	try
		{
			palavrasReservadas.add("array");palavrasReservadas.add("endwhile");palavrasReservadas.add("program");
			palavrasReservadas.add("begin");palavrasReservadas.add("function");palavrasReservadas.add("read");
			palavrasReservadas.add("then");palavrasReservadas.add("call");palavrasReservadas.add("if");
			palavrasReservadas.add("types");palavrasReservadas.add("do");palavrasReservadas.add("record");
			palavrasReservadas.add("until");palavrasReservadas.add("else");palavrasReservadas.add("parameters");
			palavrasReservadas.add("return");palavrasReservadas.add("variables");palavrasReservadas.add("end");
			palavrasReservadas.add("set");palavrasReservadas.add("while");palavrasReservadas.add("endif");
			palavrasReservadas.add("procedure");palavrasReservadas.add("write");palavrasReservadas.add("enduntil");
			palavrasReservadas.add("returns");palavrasReservadas.add("var");

            tipoPrimitivo.add("real");tipoPrimitivo.add("integer");tipoPrimitivo.add("string");
			Tester analizador = new Tester( System.in ) ;
			analizador.Program();
			System.out.println("Terminou a analise!");

		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Analisador: Encontrou erros durante a analise!");
		}
	}
}
PARSER_END(Tester)


TOKEN: // PALAVRAS CHAVE //
{
	<ARRAY: "array">
	| <ENDWHILE: "endwhile">
	| <PROGRAM: "program">
	| <BEGIN: "begin">
	| <FUNCTION: "function">
	| <READ: "read">
	| <THEN: "then">
	| <CALL: "call">
	| <IF: "if">
	| <REAL: "real">
	| <TYPES: "types">
	| <DO: "do">
	| <INTEGER: "integer">
	| <RECORD: "record">
	| <UNTIL: "until">
	| <ELSE: "else">
	| <PARAMETERS: "parameters">
	| <RETURN: "return">
	| <VARIABLES: "variables">
	| <END: "end">
	| <SET: "set">
	| <WHILE: "while">
	| <ENDIF: "endif">
	| <PROCEDURE: "procedure">
	| <STRING: "string">
	| <WRITE: "write">
	| <ENDUNTIL: "enduntil">
	| <RETURNS: "returns">
	| <VAR: "var">
}

TOKEN : // OPERADORES //
{ 
	<ADD : "+">
	| <SUB : "-">
	| <MULT : "*">
	| <DIV : "/">
	| <IGUAL : "=">
	| <MENOR : "<">
	| <MAIOR : ">">
	| <DIFERENTE : "!">
	| <MENORIGUAL : "<=">
	| <MAIORIGUAL : ">=">
}

TOKEN : // NUMEROS
{
	<INTEIRO : "0" | ["1"-"9"](<DIGITO>){0,4}>
	| <FLOAT : (<INTEIRO>)("."(<INTEIRO>))? | ((<INTEIRO>)".") | ("."(<INTEIRO>))>
	| <DIGITO : ["0"-"9"]> 
}
TOKEN : // LITERAIS
{
	<IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","0"-"9","A"-"Z","_"]){0,16}>
| <CADEIA : ("'"|"\"")["a"-"z","A"-"Z","0"-"9","!","#","$","%","&","(",")","*","+","-",".","/",":",";","<","=",">","?","`","|","~"](["a"-"z","A"-"Z","0"-"9","!","#","$","%","&","(",")","*","+","-",".","/",":",";","<","=",">","?","`","|","~"," "])*("'"|"\"")>
}

/*TOKEN : //NUMEROS 
{
	<INTEIRO : "0" | ["1"-"9"](<DIGITO>)+> // 4 Bytes
	{ 
		String t = image.toString();
		long n=Integer.parseInt(t);
		if(n < 0 || n > 2147483647)
			System.out.println("Erro semantico na linha "+input_stream.getBeginLine()+", coluna "+input_stream.getBeginColumn()+".\n\tRango do Interiro excedido : Overflow .");
	}
	| <FLOAT : (<INTEIRO>)("."(<INTEIRO>))? | ((<INTEIRO>)".") | ("."(<INTEIRO>))>
	{ 
		String[] strs = image.toString().split("\\.");
		if(strs[0].length() >9 || strs[1].length() > 9)
			System.out.println("Erro semantico na linha "+input_stream.getBeginLine()+", coluna "+input_stream.getBeginColumn()+".\n\tLimite do numero de digitos excedido na parte entera ou real da variable.");
	}	
	| <DIGITO : ["0"-"9"]> 
}
TOKEN : //LITERAIS 
{
	<IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","0"-"9","A"-"Z","_"])+>//{0,16}
	{
		t = image.toString();
		if(t.length() > 16){
			System.out.println("Erro semantico na linha "+input_stream.getBeginLine()+", coluna "+input_stream.getBeginColumn()+".\n\tTamanho maximo para identificador excedido.");
		}
	}
	| <CADEIA : ("'"|"\"")["a"-"z","A"-"Z","0"-"9","!","#","$","%","&","(",")","*","+","-",".","/",":",";","<","=",">","?","`","|","~"](["a"-"z","A"-"Z","0"-"9","!","#","$","%","&","(",")","*","+","-",".","/",":",";","<","=",">","?","`","|","~"," "])*("'"|"\"")>
}*/

TOKEN : // SYMBOLS //
{
	<PONTOVIRGULA: ";">
	|<VIRGULA: ",">
	|<ABREPAR: "(">
	|<FECPAR: ")">
	|<ABRECOL: "[">
	|<FECHACOL: "]">
	|<NAO: "~">
	|<DOT: ".">
	|<E: "&">
	|<OU: "\\">
}
SKIP :
{
	" " | "\r" | "\t" | "\n" 
}

/*
void Program():
{Token t;}
{
	(t = <ADD> 			{System.out.println("@("+t.beginLine+","+t.beginColumn+") ADD           - "+t.image);}
	| t = <SUB>			{System.out.println("@("+t.beginLine+","+t.beginColumn+") SUB           - "+t.image);}
	| t = <MULT>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") MULT          - "+t.image);}
	| t = <DIV>			{System.out.println("@("+t.beginLine+","+t.beginColumn+") DIV           - "+t.image);}
	| t = <IGUAL>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") IGUAL         - "+t.image);}
	| t = <MENOR>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") MENOR         - "+t.image);}
	| t = <MAIOR>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") MAIOR         - "+t.image);}
	| t = <DIFERENTE>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") DIFERENTE     - "+t.image);}
	| t = <MENORIGUAL>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") MENORIGUAL    - "+t.image);}
	| t = <MAIORIGUAL>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") MAIORIGUAL    - "+t.image);}
	| t = <IDENTIFIER>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") IDENTIFICADORR- "+t.image);}
	| t = <NUMERO>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") NUMERO        - "+t.image);}
	| t = <PONTOVIRGULA>{System.out.println("@("+t.beginLine+","+t.beginColumn+") PONTOVIRGULA  - "+t.image);}
	| t = <VIRGULA>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") VIRGULA       - "+t.image);}
	| t = <ABREPAR>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") ABREPAR       - "+t.image);}
	| t = <FECPAR>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") FECHAPAR      - "+t.image);}
	| t = <ABRECOL>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") ABRECOL       - "+t.image);}
	| t = <FECHACOL>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") FECHACOL      - "+t.image);}
	| t = <NAO>			{System.out.println("@("+t.beginLine+","+t.beginColumn+") NAO           - "+t.image);}
	| t = <CADEIA>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") CADEIA        - "+t.image);}
	| t = <ARRAY>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") ARRAY         - "+t.image);}
	| t = <ENDWHILE>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") ENDWHILE      - "+t.image);}
	| t = <PROGRAM>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") PROGRAM       - "+t.image);}
	| t = <BEGIN>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") BEGIN         - "+t.image);}
	| t = <FUNCTION>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") FUNCTION      - "+t.image);}
	| t = <READ>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") READ          - "+t.image);}
	| t = <THEN>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") THEN          - "+t.image);}
	| t = <CALL>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") CALL          - "+t.image);}
	| t = <IF>			{System.out.println("@("+t.beginLine+","+t.beginColumn+") IF            - "+t.image);}
	| t = <REAL>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") REAL          - "+t.image);}
	| t = <TYPES>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") TYPES         - "+t.image);}
	| t = <DO>			{System.out.println("@("+t.beginLine+","+t.beginColumn+") DO            - "+t.image);}
	| t = <INTEGER>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") INTEGER       - "+t.image);}
	| t = <RECORD>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") RECORD        - "+t.image);}
	| t = <UNTIL>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") UNTIL         - "+t.image);}
	| t = <ELSE>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") ELSE          - "+t.image);}
	| t = <PARAMETERS>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") PARAMETERS    - "+t.image);}
	| t = <RETURN>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") RETURN        - "+t.image);}
	| t = <VARIABLES>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") VARIABLES     - "+t.image);}
	| t = <END>			{System.out.println("@("+t.beginLine+","+t.beginColumn+") END           - "+t.image);}
	| t = <SET>			{System.out.println("@("+t.beginLine+","+t.beginColumn+") SET           - "+t.image);}
	| t = <WHILE>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") WHILE         - "+t.image);}
	| t = <ENDIF>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") ENDIF         - "+t.image);}
	| t = <PROCEDURE>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") PROCEDURE     - "+t.image);}
	| t = <STRING>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") STRING        - "+t.image);}
	| t = <WRITE>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") WRITE         - "+t.image);}
	| t = <ENDUNTIL>	{System.out.println("@("+t.beginLine+","+t.beginColumn+") ENDUNTIL      - "+t.image);}
	| t = <RETURNS>		{System.out.println("@("+t.beginLine+","+t.beginColumn+") RETURNS       - "+t.image);}
	| t = <VAR> 		{System.out.println("@("+t.beginLine+","+t.beginColumn+") VAR           - "+t.image);}
	| t = <DOT> 		{System.out.println("@("+t.beginLine+","+t.beginColumn+") DOT           - "+t.image);})*
}
*/


        
Token Identifier(boolean instancia): // Genera el mensage de error cuando el id es una palabra reservada o ya existe (Usar solo para variables o nombres de funciones y proc)
{
    Token t;
}
{
    t = <IDENTIFIER>
    {
        String id = t.image.toString();
        if(palavrasReservadas.contains(id.toLowerCase())||tipoPrimitivo.contains(id.toLowerCase()))
            System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tO identifier nao pode ser uma palavra reservada!");
        else if(ts.existType(id))
            System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\t Identifier "+t.image.toString()+" nao pode ser um tipo de dado!");
        else if(ts.existId(id)&&instancia)
            System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tVariavel "+t.image.toString()+" ja foi definida.");
        return t;
    }          
}
    
String criarRotulo():
{}
{
	{
 		contLabel++;
 		return "L"+contLabel;
 	}
}

String usaRotulo():
{}
{
	{
 		return "L"+contLabel;
 	}
}

void addHash(String ident):
{}
{
	{
		Map myMap = new HashMap<Integer, Integer>();
        myMap.put(nivel,actualVar);
		actualVar++;
		posVariaveis.put(ident,myMap);

		//System.out.println(ident + " "+nivel+ " actualVar");
	}
}

void addHashParam(int nParametros):
{}
{
	{
		for(int i = 0; i < nParametros; i++) {
			Map myMap = new HashMap<Integer, Integer>();
	        myMap.put(nivel,actualParam);
			actualParam--;
			posVariaveis.put(ids.get(ids.size()-1),myMap);
			ids.remove(ids.size()-1);
		}
	}
}

void addCmd(String label, String comando, String par1, String par2):
{}
{
	{
		ArrayList<String> cmd = new ArrayList<String>();
		cmd.add(label);
		cmd.add(comando);
		cmd.add(par1);
		cmd.add(par2);
		P.add(cmd);
	}
}

void geraCodigo():
{}
{
	{
		try {
			File file = new File("codigo.txt");
			if (!file.exists()) {
				file.createNewFile();
			}
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			for(int i = 0; i < P.size(); i++) {
				bw.write(P.get(i).get(0) + "\t" + P.get(i).get(1) + "\t" + P.get(i).get(2) + "\t" + P.get(i).get(3) + "\n");
			}
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

//Programa e Bloco

//1.  Program ::= Header DeclSec Block
void Program():
{}
{
	{
		addCmd("", "INPP", "", "");
	}
	Header() DeclSec() Block() <DOT>
	{
		ts.removeLevelScope();
		addCmd("", "PARA", "", "");
		geraCodigo();
	}
}

//2.  Header ::= program identifier ;
void Header():
{
    Token t;
}
{
    <PROGRAM>
    t = Identifier(false)
    {
        String id = t.image.toString();
	if(!palavrasReservadas.contains(id.toLowerCase())&&!tipoPrimitivo.contains(id.toLowerCase()))
        {
            ts.addDescritor(id,"PROGRAM");
	}
	else
            System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tO identifier nao pode ser uma palavra reservada!");
    }     
    <PONTOVIRGULA>	
}

//3.  Block ::= begin Statements end
void Block():
{}
{
    <BEGIN> Statements() <END>
    {
    	addCmd("", "DMEM", "" + dmem.get(dmem.size()-1), "");
    	dmem.remove(dmem.size()-1);
    }
}

//Declarações//

//4.  DeclSec ::= TypeDeclSec VarDeclSec SubProgramDecls
void DeclSec():
{
	String rotulo = "";
}
{
	TypeDeclSec() VarDeclSec()
	{
		rotulo = criarRotulo();
		addCmd("", "DSVS", rotulo, "");
	}
	SubProgramDecls()
	{
		addCmd(rotulo, "NADA", "", "");
	}
}

//5.  TypeDeclSec ::= [types TypeDecls]
void TypeDeclSec():
{}
{
	[<TYPES> TypeDecls()]
}

//6.  TypeDecls ::= TypeDecl+
void TypeDecls():
{}
{
	(TypeDecl())+
}

//7.  TypeDecl ::= identifier TypeSpecification
void TypeDecl():
{
	Token t;
}
{
	t=Identifier(false)
	{
		String idTipo=t.image.toString();
		if(!palavrasReservadas.contains(idTipo.toLowerCase())&&!tipoPrimitivo.contains(idTipo.toLowerCase()))
			if(!ts.addDescritor(idTipo,"TYPE"))
				System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tO Tipo "+t.image.toString()+" ja foi definido nesse contexto.");
	}
	TypeSpecification(idTipo)
}

//8.  TypeSpecification ::= (ArraySpecification |  RecordSpecification)
void TypeSpecification(String idTipo):
{}
{
	(ArraySpecification(idTipo) | RecordSpecification(idTipo))
}

//9.  ArraySpecification ::= array DataType “[“numericliteral”]”;
void ArraySpecification(String idArray)://///////////////////////////WARDIOLA :V
{
	Token t;
}
{
	<ARRAY>
	t = DataType()
	{
		if(ts.existId(idArray)) {//Verifica si el id existe en el escopo actual
			Descritor desIdArray = ts.searchScopeAtual(idArray);
			if(desIdArray.getRotulo().compareToIgnoreCase("TYPE")==0) {// Verifica si es un Type 
				if(idArray.compareToIgnoreCase(t.image.toString())==0)
					System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\t O DataType: " +t.image.toString()+" precisa  ser diferente ao identifier.");
				else {
					desIdArray.getCategoria().set("ELEMTYPE","ARRAY");
					Descritor dataTipo = ts.initDataType(t.image.toString());
					((ArrayTipo)((Tipo)desIdArray.getCategoria()).get("ELEMTYPE")).set("ELEMTYPE",dataTipo);
				}
			}
		}
	}
	<ABRECOL>
	t = <INTEIRO>//INTEIRO
	{		
		if(isInteger(t.image.toString())) {
			int size = Integer.parseInt(t.image.toString());
				if(size>0)
					((ArrayTipo)((Tipo)ts.searchScopeAtual(idArray).getCategoria()).get("ELEMTYPE")).set("SIZE",size);            
				else
					System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\t O indice nao pode ser negativo: "+t.image.toString());
		} else
            System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\t O indice nao é um inteiro: "+t.image.toString());
	}
	<FECHACOL>
	<PONTOVIRGULA>
}

//10. RecordSpecification ::= record VarDecls end;
void RecordSpecification(String idRecord):
{}
{
	{
            if(ts.existId(idRecord))//Verifica si el id existe en el escopo actual
            {              
 		Descritor desRecordTipo = ts.searchDataType(idRecord);
                if(desRecordTipo.getRotulo().compareToIgnoreCase("TYPE")==0)// Verifica si es un Type           
                    desRecordTipo.getCategoria().set("ELEMTYPE","RECORD");
            }
	}
	<RECORD>
	VarDecls(idRecord, true)
	<END> <PONTOVIRGULA>
}

//11. VarDeclSec ::= [variables VarDecls]
void VarDeclSec():
{
	int n;
}
{
	[<VARIABLES> 
	{
		flag = 4;
	}
	n = VarDecls("",false)
	{
	 	addCmd("", "AMEM", "" + n, "");
	 	dmem.add(n);
	 	flag = 0;
	 	actualVar = 0;
	}
	]
}

//12. VarDecls ::= (VarDecl)+
int VarDecls(String idTipo, boolean origenRecord):
{
	int total = 0, n = 0;
}
{
	(n = VarDecl(idTipo, origenRecord){ total += n;})+
	{
		return total;
	}
}

//13. VarDecl ::= DataType IdList ;
int VarDecl(String idTipo, boolean origenRecord):
{ 
	Token t; int n;
}
{
	t = DataType()
	n = IdList(idTipo, t, origenRecord) 
	<PONTOVIRGULA>
	{
		return n;
	}
}

//14. DataType ::= (real | integer | identifier | string)
Token DataType():
{
	Token t;
}
{
	(t = <REAL>
	|t = <INTEGER>
	|t = <IDENTIFIER>
	{
		if(!ts.existType(t.image.toString()))
			System.out.println("Erro semantico na linha: "+t.beginLine+", coluna: "+t.beginColumn+".\n\tTipo "+t.image.toString()+" nao esta definido.");
	}
	|t= <STRING>
	)
	{
		return t;
	}
}

//15. IdList ::= identifier {, identifier}
int IdList(String idTipo, Token dataT, boolean origenRecord):
{
	Token t; int n = 1;
}
{
	t=Identifier(true)
	{
		addRecordData(idTipo,dataT, t, origenRecord);
		if(flag==4)
			addHash(t.image.toString());
	}
	(
	<VIRGULA>
	t=Identifier(true)
	{
		addRecordData(idTipo,dataT, t, origenRecord);
		if(flag==4)
			addHash(t.image.toString());
		n++;
	}
	)*
	{
		return n;
	}
}

//Java Code
void addRecordData(String idTipo,Token dataT, Token id, boolean origenRecord):
{}
{	//Java code
	{	
		if(origenRecord)//TYPERECORD
		{
                    if(ts.existId(idTipo))//Verifica si el id existe en el escopo actual       
                    {
                        Descritor desIdTipo = ts.searchScopeAtual(idTipo);
                        if(desIdTipo.getRotulo().compareToIgnoreCase("TYPE")==0)// Verifica si es un Type           				
                            if(ts.existType(dataT.image.toString()))
                            {
				Descritor dataTipo = ts.initDataType(dataT.image.toString());
				if(!palavrasReservadas.contains(id.image.toString())&&!ts.existType(id.image.toString()))
				{
					boolean result =((RecordTipo)((Tipo)desIdTipo.getCategoria()).get("ELEMTYPE")).set(id.image.toString(),dataTipo);
					if(!result)
						System.out.println("Erro semantico na linha "+id.beginLine+", coluna "+id.beginColumn+".\n\tIdentificador "+id.image.toString()+" ja foi definido.");	
				}				
                            }
                    }
		}
		else //VARIABLES
		{
                    if(ts.existType(dataT.image.toString())&&!ts.existId(id.image.toString())
                            &&!palavrasReservadas.contains(id.image.toString().toLowerCase())
                            &&!ts.existType(id.image.toString()))//Solo si existe dataType y el id no fue definido en el mismo escopo
                    {
			Descritor dataTipo = ts.initDataType(dataT.image.toString());
			if(ts.addDescritor(id.image.toString(),"VARIABLE"))
                            ((Variavel)ts.searchVariable(id.image.toString()).getCategoria()).set("ELEMTYPE",dataTipo);		
                    }
		}
	}
}

//16. SubProgramDecls ::= (SubProgramDecl)*
void SubProgramDecls():
{}
{
	(SubProgramDecl())*
}

//17. SubProgramDecl ::= (ProcDecl | FunctionDecl)
void SubProgramDecl():
{
	String rotulo;
	int nParametros;
}
{
	{
		rotulo = criarRotulo();
		addCmd(rotulo, "NADA", "", "");
		nivel++;
		addCmd("", "ENPR", "" + nivel, "");
	}
	(nParametros = ProcDecl()
	{
		addCmd("", "RTPR", "" + nParametros, "");
	}
	| FunctionDecl())
	{
		nivel--;
		ts.removeLevelScope();
	}
}

//18. ProcDecl ::= ProcHeader SubProgramDeclSec Block;
int ProcDecl():
{
	String nameP;
	int nParametros;
}
{
	nameP=ProcHeader()
	{
		funtionLabels.put(nameP, usaRotulo());
	}
	nParametros = SubProgramDeclSec(nameP) Block() <PONTOVIRGULA>
	{
		return nParametros;
	}
}

//19. ProcHeader ::= procedure identifier ;
String ProcHeader():
{
	Token t;
}
{
	<PROCEDURE> 
	t=Identifier(true)
	<PONTOVIRGULA>
	{
		String nameP = t.image.toString();
		ts.addDescritor(nameP, "PROCEDURE");
		ts.addLevelScope();
		return nameP;
	}
}

//20. SubProgramDeclSec ::= ParamDeclSec DeclSec
int SubProgramDeclSec(String nameSubPrograma):
{
	int nParametros=0;
}
{
	nParametros=ParamDeclSec(nameSubPrograma) 
	{
  		if(ts.searchId(ts.getscopeAtual()-1,nameSubPrograma))    
                {
                    String subProg = ts.search(ts.getscopeAtual()-1,nameSubPrograma).getRotulo();
                    if(subProg.compareTo("FUNCTION")==0||subProg.compareTo("PROCEDURE")==0)       
                        ts.search(ts.getscopeAtual()-1, nameSubPrograma).getCategoria().set("NPARAMS", nParametros);
                }
	}
	DeclSec()
	{
		return nParametros;
	}
}

//21. ParamDeclSec ::= [parameters ParamDecls]
int ParamDeclSec(String nameSubPrograma):
{
	int nParametros=0;
}
{
	[<PARAMETERS> nParametros=ParamDecls(nameSubPrograma)]
	{
		addHashParam(nParametros);
		return nParametros;
	}
}

//22. ParamDecls ::= (ParamDecl)+
int ParamDecls(String nameSubPrograma):
{
	int nParametros=0;
}
{
	(nParametros = ParamDecl(nParametros,nameSubPrograma))+
	{
		return nParametros;
	}
}

//23. ParamDecl ::= [var]DataType identifier;
int ParamDecl(int nParametros,String nameSubPrograma):
{
	String classParam="VALUE";
	Token dataT;
	Token id;
}
{ 
	[
	<VAR>
	{
		classParam = "REFERENCE";
	}
	]
	dataT = DataType()
	id = Identifier(true)
	<PONTOVIRGULA>
	{


		if(!palavrasReservadas.contains(id.image.toString().toLowerCase())&&!ts.existType(id.image.toString())&&!ts.existId(id.image.toString())&&ts.existType(dataT.image.toString())) {
			ts.addDescritor(id.image.toString(), "PARAM");
			Descritor descParam = ts.searchScopeAtual(id.image.toString());
			((Parametro)descParam.getCategoria()).set("ELEMTYPE", ts.initDataType(dataT.image.toString()));
			((Parametro)descParam.getCategoria()).set("TCLASS", classParam);
			Descritor subProgram = ts.search(ts.getscopeAtual()-1,nameSubPrograma);
			subProgram.getCategoria().set(id.image.toString(),descParam);
			addHash(id.image.toString());
		}
	ids.add(id.image.toString());
	return nParametros+1;
	}
}

//24. FunctionDecl ::= FunctionHeader SubProgramDeclSec FunctionBlock ;
void FunctionDecl():
{
	String[] returnFHeader;
}
{
	returnFHeader=FunctionHeader() SubProgramDeclSec(returnFHeader[0]) FunctionBlock(returnFHeader[1]) <PONTOVIRGULA>
}

//25. FunctionHeader ::= function identifier returns Datatype ;
String[] FunctionHeader():
{
	Token id;
	Token tipoR;
	String[] returnFHeader = new String[2];
}
{
	<FUNCTION> id = Identifier(true) <RETURNS> tipoR=DataType() <PONTOVIRGULA>
	{
		String nameF = id.image.toString();
		ts.addDescritor(nameF, "FUNCTION");
		if(ts.existId(nameF))
                {       
                    if(ts.searchScopeAtual(nameF).getRotulo().compareTo("FUNCTION")==0&&ts.existType(tipoR.image.toString()))
                    {
						((Function)ts.searchScopeAtual(nameF).getCategoria()).set("RTYPE", ts.initDataType(tipoR.image.toString()));
                    }
                }
		ts.addLevelScope();
		returnFHeader[0] = nameF;
		returnFHeader[1] = tipoR.image.toString();
		return returnFHeader;
	}
}

//26. FunctionBlock ::= begin SpecialStatements end  
void FunctionBlock(String rType):
{}
{
	<BEGIN> SpecialStatements(rType) <END>
}

//Comandos //

//27. Statements ::= Statement {; Statement}
void Statements():
{}
{
	Statement()(<PONTOVIRGULA> Statement())*
}

//28. SpecialStatements ::= Statement; {Statement;} ReturnStatement 
void SpecialStatements(String rType):
{}
{
	(LOOKAHEAD(2)Statement()<PONTOVIRGULA>)+ReturnStatement(rType)
}

/*29. Statement ::= [(read  Variable | set  Variable = Expresion
| write  Variable
| if Condition then Statements ElseClause
| while Condition do Statements endwhile
| until Condition do Statements enduntil
| call identifier ArgList)]*/
void Statement():
{
	Token t;
	String tipo1, tipo2, arrayType, rotulo, rotulo2;
}
{ 	
	


	[(t = <READ>   
	{
		addCmd("", "LEIT", "", "");	
		flag = 1;
	}
	tipo1 = Variable(true, null, false)
	{
		msgError(tipo1,t);
	}
	|
	{
		flag = 5;
	}
	<SET> tipo1 = Variable(true, null, false) t = <IGUAL> tipo2 = Expression()
	{
		addCmd(cmd.get(0), cmd.get(1), cmd.get(2), cmd.get(3));
		if(tipo1.compareToIgnoreCase("_NULO_")!=0)
		{
			//if(tipo1.compareToIgnoreCase("VETOR")!=0 && tipo1.compareToIgnoreCase("RECORD")!=0)
				//if(ts.searchDataType(tipo1).getRotulo().compareToIgnoreCase("TYPE")==0)
					//tipo1 = ((Descritor)((Categoria)((Tipo)ts.searchDataType(tipo1).getCategoria()).get("ELEMTYPE")).get("ELEMTYPE")).getRotulo();
				if(tipo1.compareToIgnoreCase(tipo2)!=0)						
					if(tipo1.compareToIgnoreCase(tipo2)!=0)
						System.out.println("Erro semantica na linha: "+t.beginLine+", coluna: "+t.beginColumn+".\n\tTipos incompativeis("+tipo1+" diferente de "+tipo2+")!");
				
		}
		else
			System.out.println("Erro semantica na linha: "+t.beginLine+", coluna: "+t.beginColumn+".\n\tVariable inexistente");
	}
	| 
	t = <WRITE> 
	{
		flag =2;

	}
	tipo1 = Variable(true, null, false) 
	{
		addCmd("","IMPR","","");
		msgError(tipo1,t);
	}
	| t = <IF>
	{
		rotulo = criarRotulo();
	}
	tipo1 = Condition() <THEN> Statements()
	{
		rotulo2 = criarRotulo();
		addCmd("", "DSVS", rotulo2, "");
		addCmd(rotulo, "NADA", "", "");
	}
	ElseClause()
	{
		msgCondError(tipo1,t);
		addCmd(rotulo2, "NADA", "", "");
	}
	| t = <WHILE>
	{
		rotulo = criarRotulo();
		rotulo2 = criarRotulo();
		addCmd(rotulo, "NADA", "", "");
	}
	tipo1 = Condition() <DO> Statements() <ENDWHILE>
	{
		addCmd("", "DSVS", rotulo, "");
		addCmd(rotulo2, "NADA", "", "");
	}
	{
		msgCondError(tipo1,t);
	}
	| t = <UNTIL> tipo1 = Condition() <DO> Statements() <ENDUNTIL>
	{
		msgCondError(tipo1,t);
	}
	| <CALL> t = Identifier(false)
	{
		Descritor identChpr=ts.search(0,t.image.toString());
		if(identChpr != null){
			
		
		if(identChpr.getRotulo().compareToIgnoreCase("FUNCTION")==0)
			addCmd("", "AMEN 1","", "");
		//Olhamos si a function ou procedimento tem parametros
		if(identChpr.getRotulo().compareToIgnoreCase("FUNCTION")==0||identChpr.getRotulo().compareToIgnoreCase("PROCEDURE")==0)
		{
			Categoria dataTypeId=identChpr.getCategoria();
			int nPar=(int)dataTypeId.get("NPARAMS");
			for(int p=0;p<nPar;p++)
			{
				Categoria paraChpr=(Categoria)((Descritor)(dataTypeId.get(String.valueOf(p)))).getCategoria();
				parametros.add((String)paraChpr.get("TCLASS"));
				
			}
		}
		}		
	}
	ArgList(t,true)
	{
		addCmd("", "CHPR", funtionLabels.get(t.image.toString()), "");
		parametros = new ArrayList<String>();
		indiceParametro = 0 ;
	}
	)]
}
void msgError(String tipo, Token t):
{}
{
	{
		if(tipo.compareToIgnoreCase("INTEGER")!=0 && tipo.compareToIgnoreCase("REAL") !=0 && tipo.compareToIgnoreCase("STRING")!=0)
			System.out.println("Erro semantica na linha: "+t.beginLine+", coluna: "+t.beginColumn+".\n\tTipo invalido para condicao.\n\tEsperado: INTEGER, REAL ou STRING, encontrado: "+tipo);
	}
}

void msgCondError(String tipo, Token t):
{}
{
	{
	if(tipo.compareToIgnoreCase("INTEGER")!=0)
		System.out.println("Erro semantica na linha: "+t.beginLine+", coluna: "+t.beginColumn+".\n\tTipo invalido para condicao.\n\tEsperado: INTEGER, encontrado: "+tipo);
	}
}

//30. ElseClause ::= (else Statements endif | endif
void ElseClause():
{}
{
	(<ELSE> Statements() <ENDIF> | <ENDIF>)
}

//31. ReturnStatement ::= return “(“ Condition “)”
void ReturnStatement(String rType):
{
	Token t;
	String returned;
}
{
	<RETURN> t = <ABREPAR> returned = Condition() <FECPAR>
	{
		if(returned.compareToIgnoreCase(rType)!=0)
			System.out.println("Erro semantico na linha: "+t.beginLine+", coluna: "+t.beginColumn+".\n\tTipo retornado nao esperado!");
	}
}

//32. ArgList ::= [“(“ Arguments “)”]
void ArgList(Token t,boolean chpr):
{}
{
	[<ABREPAR> Arguments(t) <FECPAR>]
}

//33. ArgListSpecial ::= “(“ Arguments “)” 
void ArgListSpecial():
{}
{
	<ABREPAR> Arguments(null) <FECPAR>
}

//34. Arguments ::= Argument {, Argument}
void Arguments(Token t):
{}
{
    Argument() 

    (
    	{indiceParametro++;}
    <VIRGULA> Argument()
    )*
}

//Expressões//

//35. Condition ::= CompoundCondition {\ CompoundCondition}
String Condition():
{
	Token top = null;
	String op, tipo1, tipo2;
	boolean hasReal = false, error = false;
}
{
    tipo1 = CompoundCondition()
    {
    	if(tipo1.compareToIgnoreCase("STRING")==0 || tipo1.compareToIgnoreCase("_NULO_")==0)
    		error = true;
    	if(tipo1.compareToIgnoreCase("INTEGER")!=0)
    		hasReal = true;
    }
    ( top = <OU> tipo2 = CompoundCondition()
    {
    	if(tipo2.compareToIgnoreCase("STRING")==0 || tipo1.compareToIgnoreCase("_NULO_")==0)
    		error = true;
    	if(tipo2.compareToIgnoreCase("INTEGER")!=0)
    		hasReal = true;
    }
    )*
    {
    	if(top == null)
    		return tipo1;
    	else if(!error && !hasReal)
    		return "INTEGER";
    	else if (!error)
    		return "REAL";
    	else
    		return "_NULO_";
    }
}

//36. CompoundCondition ::= SimpleCondition {& SimpleCondition}
String CompoundCondition():
{
	Token top = null;
	String op, tipo1, tipo2;
	boolean hasReal = false, error = false;
}
{
    tipo1 = SimpleCondition()
    {
    	if(tipo1.compareToIgnoreCase("STRING")==0 || tipo1.compareToIgnoreCase("_NULO_")==0)
    		error = true;
    	if(tipo1.compareToIgnoreCase("INTEGER")!=0)
    		hasReal = true;
    }
    ( top = <E> tipo2 = SimpleCondition()
    {
    	if(tipo2.compareToIgnoreCase("STRING")==0 || tipo1.compareToIgnoreCase("_NULO_")==0)
    		error = true;
    	if(tipo2.compareToIgnoreCase("INTEGER")!=0)
    		hasReal = true;
    }
    )*
    {
    	if(top == null)
    		return tipo1;
    	else if(!error && !hasReal)
    		return "INTEGER";
    	else if (!error)
    		return "REAL";
    	else
    		return "_NULO_";
    }
}

//37. SimpleCondition ::= Expression [RelOp Expression]
String SimpleCondition():
{
	Token top;
	String op, tipo1, tipo2;
}
{
    tipo1 = Expression() [ top = RelOp() tipo2 = Expression()
    {
    	switch(top.image.toString()){
    		case "=":
    			addCmd("", "CMIG", "", "");
    			break;
    		case ">":
    			addCmd("", "CMMA", "", "");
    			break;
    		case "<":
    			addCmd("", "CMME", "", "");
    			break;
    		case ">=":
    			addCmd("", "CMAG", "", "");
    			break;
    		case "<=":
    			addCmd("", "CMEG", "", "");
    			break;
    		case "!":
    			addCmd("", "CMDG", "", "");
    			break;
    	}
    	addCmd("", "DSVF", usaRotulo(), "");
    }
    {
    	op = top.image.toString();
    	if(tipo1.compareToIgnoreCase("STRING")==0 || tipo2.compareToIgnoreCase("STRING")==0 || tipo1.compareToIgnoreCase("_NULO_")==0 || tipo1.compareToIgnoreCase("_NULO_")==0){
    		System.out.println("Erro semantico na linha: "+top.beginLine+", coluna: "+top.beginColumn+".\n\tEsperado INTEGER ou REAL!");
    		return "_NULO_";
    	}
    	else if(tipo1.compareToIgnoreCase("INTEGER")!=0 || tipo2.compareToIgnoreCase("INTEGER")!=0)
    		return "REAL";
    	else
    		return "INTEGER";
    }
    ]
    {
    	return tipo1;
    }
}

//38. Expression ::= Term {AddOp Term}
String Expression():
{
	Token top;
	String op, tipo1, tipo2;
}
{
	tipo1 = Term()
	(top = AddOp()
	tipo2 = Term()
	{
		switch(top.image.toString()){
    		case "+":
    			addCmd("", "SOMA", "", "");
    			break;
    		case "-":
    			addCmd("", "SUBT", "", "");
    			break;
		}
	}
	{
		op =top.image.toString();
    	if(op.compareTo("*")==0 || op.compareTo("/")==0){
    		if(tipo1.compareTo(tipo2)==0)
    			tipo1 = tipo1;
    		else if(tipo1.compareTo("INTEGER")==0 && tipo2.compareTo("REAL")==0)
    			tipo1 = tipo2;
    		else if(tipo1.compareTo("REAL")==0 && tipo2.compareTo("INTEGER")==0)
    			tipo1 = tipo1;
    		else {
    			System.out.println("Erro semantico na linha: "+top.beginLine+", coluna: "+top.beginColumn+".\n\tTipos incompativeis. ("+tipo1+" "+op+" "+tipo2+")!");
    		}
    	}
    }
	)*
	{
	  	return tipo1;
	}
}

//39. Term ::= Unary {MultOp Unary}
String Term():
{
	Token top;
	String op, tipo1, tipo2;
}
{
	tipo1 = Unary()
	(top = MultOp()
	tipo2 = Unary()
	{
		switch(top.image.toString()){
    		case "*":
    			addCmd("", "MULT", "", "");
    			break;
    		case "/":
    			addCmd("", "DIVI", "", "");
    			break;
		}
	}
	{
		op =top.image.toString();
    	if(op.compareTo("*")==0 || op.compareTo("/")==0){
    		if(tipo1.compareTo(tipo2)==0)
    			tipo1 = tipo1;
    		else if(tipo1.compareTo("INTEGER")==0 && tipo2.compareTo("REAL")==0)
    			tipo1 = tipo2;
    		else if(tipo1.compareTo("REAL")==0 && tipo2.compareTo("INTEGER")==0)
    			tipo1 = tipo1;
    		else {
    			System.out.println("Erro semantico na linha: "+top.beginLine+", coluna: "+top.beginColumn+".\n\tTipos incompativeis. ("+tipo1+" "+op+" "+tipo2+")!");
    		}
    	}
	}
	)*
	{
	   	return tipo1;
	}
}

//40. [+ | -] Factor
String Unary():
{
	String type;
}
{
    [<ADD>|<SUB>]
    type = Factor()
    {
    	return type;
    }
    
}

//41. Factor ::=  <Identifier> <ArgListSpecial> | numericLiteral | stringLiteral | “~”<Factor> | “(” <Condition> “)” | <Variable>
String Factor():/// FALTA SEGUIR IMPLENTANDO
{
	Token t;
	int nparams = 0;
	Descritor o = null;
	String typeName = "_NULO_";
	Descritor type = null;
	Token aux;
}
{
	(LOOKAHEAD(2) t = Identifier(false) ArgListSpecial()
	{
		typeName = ts.search(0,t.image.toString()).getRotulo();
		if(typeName.compareToIgnoreCase("FUNCTION")==0){
			return ((Descritor)ts.search(0,t.image.toString()).getCategoria().get("RTYPE")).getRotulo();
		} else {
			return ts.searchDataType(t.image.toString()).getRotulo();
		}
	}
	|t = <FLOAT>
	{
		
		addCmd("", "CRCT", t.image.toString(), "");
		return "REAL";
	}
	|t = <INTEIRO>
	{
		
		addCmd("", "CRCT", t.image.toString(), "");
		return "INTEGER";
	}
	|<CADEIA> 
	{
		return "STRING";
	}
	|aux = <NAO> typeName = Factor() 
	|<ABREPAR> Condition() <FECPAR> 
	|
	{
		flag = 2;
	}
	typeName = Variable(true, o,false))
	{
		return typeName;
	}
}

//42. Variable ::=<Identifier> [“[” <Expression> “]”](“.”<Variable>)*
String Variable(boolean inicial, Descritor tipoVar,boolean indexAnterior):
{
	Token t;
	Descritor type = null;
	String typeName = null;
	Token nIndex=null;
	boolean index;
}
{
	{
        index = false;
	}
	t = Identifier(false) (<ABRECOL>nIndex=<INTEIRO> <FECHACOL>{index = true;}/*Java code*/)?
		//Java code
	{	
		switch(flag){
			case 0 :
				break;
			case 1 :
				for(int i = nivel; i >=0; i--){
					if(posVariaveis.get(t.image.toString()).get(i) != null){
						addCmd("", "ARMZ", "" + i, "" + posVariaveis.get(t.image.toString()).get(i));
						flag = 0;
						break;
					}
				}
				break;
			case 2:
				for(int i = nivel; i >=0; i--){
					//System.out.println("tan "+posVariaveis.size());
					if(posVariaveis.get(t.image.toString()).get(i) != null)
					{
						if(parametros.size()!=0)
						{	
							if(parametros.get(indiceParametro).compareToIgnoreCase("REFERENCE")==0)
								addCmd("", "CREN", "" + i, "" + posVariaveis.get(t.image.toString()).get(i));
							else
								addCmd("", "CRVL", "" + i, "" + posVariaveis.get(t.image.toString()).get(i));
						}
						else
							addCmd("", "CRVL", "" + i, "" + posVariaveis.get(t.image.toString()).get(i));
						flag = 0;
						break;
					}
				}
				break;
			case 3:
				for(int i = nivel; i >=0; i--){
					if(posVariaveis.get(t.image.toString()).get(i) != null){
						flag = 0;
						break;
					}
				}
				break;
			case 5:
				cmd = new ArrayList<String>();
				cmd.add("");
				cmd.add("ARMZ");
				for(int i = nivel; i >=0; i--){
					if(posVariaveis.get(t.image.toString()).get(i) != null){
						cmd.add("" + i);
						cmd.add("" + posVariaveis.get(t.image.toString()).get(i));
						break;
					}
				}
				flag = 0;
				break;

		}
		if(inicial)// Si fuera la variable inicial
        {       	
            tipoVar=null;
            if(palavrasReservadas.contains(t.image.toString().toLowerCase())||tipoPrimitivo.contains(t.image.toString().toLowerCase()))
                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\t O indentificador "+t.image.toString()+" nao pode ser palavra chave.");
            else if(ts.existType(t.image.toString()))
                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\t O indentificador "+t.image.toString()+" nao pode ser um tipo de dado.");
            else 
            {
                if(ts.existVariable(t.image.toString())||ts.existFunction(t.image.toString()))
                {
                    Descritor var = ts.search(t.image.toString());
                    //System.out.println("BIENMAL: " + (var.getRotulo());
                    if(var.getRotulo().compareTo("VARIABLE")==0||var.getRotulo().compareTo("PARAM")==0)
                        tipoVar = (Descritor) var.getCategoria().get("ELEMTYPE");
                    else if(var.getRotulo().compareTo("FUNCTION")==0)
                        tipoVar = (Descritor) var.getCategoria().get("RTYPE");
                    type = tipoVar;                     		
                    if(tipoVar.getRotulo().compareToIgnoreCase("TYPE")==0)
                    {
                    	if(index==true&&((String)tipoVar.getCategoria().get("ROTULO")).compareTo("ARRAY")==0&&index)
                    	{
                    		int sizeMax=(int)(((ArrayTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get("SIZE"));
                    		int ind =Integer.parseInt(nIndex.image.toString());
                    		if(ind<0 || ind>=sizeMax)
                    			System.out.println("Erro semantico na linha "+nIndex.beginLine+", coluna "+nIndex.beginColumn+".\n\tO indice do array  "+t.image.toString()+"  estam fora de seu rango");
                    	}
                        while(((String)tipoVar.getCategoria().get("ROTULO")).compareTo("ARRAY")==0 && index)
                         	tipoVar=(Descritor)(((ArrayTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get("ELEMTYPE"));
                    }
					if(var.getRotulo().equals("FUNCTION") && !var.getCategoria().get("NPARAMS").equals(0))
						System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tNumero de argumentos passados para a funcao "+t.image.toString()+" eh diferente do esperado.");
                        
                }             
                else
                	System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\t Indentificador "+t.image.toString()+" nao foi declarado ou e um procedimento.");     
            }
		}
        else//trata campos
        {
			if(tipoVar == null)
				System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tImpossivel acessar o campo "+t.image.toString()+" porque um ou mais campos anteriores nao foram declarados corretamente.");
			else if(((String)tipoVar.getCategoria().get("ROTULO")).equals("ARRAY")&&indexAnterior==false)
				System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tImpossivel acessar o campo "+t.image.toString()+" a partir de um array.");
			else if(((String)tipoVar.getCategoria().get("ROTULO")).equals("RECORD")
				&&(Descritor)(((RecordTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get(t.image.toString()))== null)
				System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tCampo "+t.image.toString()+" nao foi declarado.");
            else 
            {
            	 Descritor var =tipoVar;
  				if(var.getRotulo().compareTo("VARIABLE")==0||var.getRotulo().compareTo("PARAM")==0)
                     tipoVar = (Descritor) var.getCategoria().get("ELEMTYPE");
                else if(var.getRotulo().compareTo("FUNCTION")==0)
                    tipoVar = (Descritor) var.getCategoria().get("RTYPE");
                type = tipoVar;                     		
                if(tipoVar.getRotulo().compareToIgnoreCase("TYPE")==0)
                {
	 				if(((String)(tipoVar.getCategoria()).get("ROTULO")).compareTo("RECORD")==0)
	                {
						tipoVar = (Descritor)(((RecordTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get(t.image.toString()));
						type = tipoVar;
	                }     
	                else if(((String)(tipoVar.getCategoria()).get("ROTULO")).compareTo("ARRAY")==0&&index)
	                {

	                    int sizeMax=(int)(((ArrayTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get("SIZE"));
	                    int ind =Integer.parseInt(nIndex.image.toString());
	                    if(ind<0 || ind>=sizeMax)
	                    	System.out.println("Erro semantico na linha "+nIndex.beginLine+", coluna "+nIndex.beginColumn+".\n\tO indice do array  "+t.image.toString()+"  estam fora de seu rango");                	
	                    tipoVar =  (Descritor)(((ArrayTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get("ELEMTYPE"));
						type = tipoVar;		
						while(((String)tipoVar.getCategoria().get("ROTULO")).compareTo("ARRAY")==0 )
	                         	tipoVar=(Descritor)(((ArrayTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get("ELEMTYPE"));		

	                }                   
                    while(((String)tipoVar.getCategoria().get("ROTULO")).compareTo("ARRAY")==0 && index)
                        tipoVar=(Descritor)(((ArrayTipo)(((Tipo) tipoVar.getCategoria()).get("ELEMTYPE"))).get("ELEMTYPE"));
                }
				if(var.getRotulo().equals("FUNCTION") && !var.getCategoria().get("NPARAMS").equals(0))
					System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tNumero de argumentos passados para a funcao "+t.image.toString()+" eh diferente do esperado.");                                   	                     		   		             
			}
		}
	}
		
	(LOOKAHEAD(2)<DOT>typeName = Variable(false, tipoVar,index))*
	{
		if(typeName == null)
                {
			if(type == null || type.getCategoria()== null)
				typeName = "_NULO_";
			else
                        {
				typeName = type.getRotulo();
				//System.out.println("HMMM: " + type.getRotulo());
				if(typeName.equals("RECORD")&&index==false )
                {
                	System.out.println("bien");
					type = (Descritor)((RecordTipo)type.getCategoria()).get(t.image.toString());
					typeName = type.getRotulo();
					System.out.println("error");
				}	
                else if(typeName.equals("FUNCTION"))
					type = ((Descritor)type.getCategoria().get("RTYPE"));
				else if(typeName.equals("ARRAY") && index)
					type = ((Descritor)type.getCategoria().get("ELEMTYPE"));
				else if(typeName.equals("VARIABLE"))
					type = ((Descritor)type.getCategoria().get("ELEMTYPE"));
				typeName = type.getId();
			}		
		}
		return typeName;
	}
}


//43. RelOp ::= (= | ! | > | < | <= | >=)
Token RelOp():
{Token t;}
{
	(t = <IGUAL>|t =  <DIFERENTE>|t =  <MAIOR>|t =  <MENOR>| LOOKAHEAD(2)t=<MENORIGUAL> | LOOKAHEAD(2)t=<MAIORIGUAL>)
	{
		return t;
	}
}

//44. AddOp ::= (+ | -)
Token AddOp():
{Token t;}
{
	(t = <ADD>| t = <SUB>)
	{
		return t;
	}
}

//45. MultOp ::=  (* | /)
Token MultOp():
{Token t;}
{
	(t = <MULT>| t = <DIV>)
	{
		return t;
	}
}

//46. Argument ::= Condition
void Argument():
{}
{
	Condition()
}


//THIS PART READ COMMENTS

SKIP:
{
	"{": ComentarioBloco
}
<ComentarioBloco> SKIP:
{
	"}": DEFAULT
}
<ComentarioBloco> MORE:
{
<~ [ ] >
}
SKIP:
{
	"--": ComentarioLinha
}
<ComentarioLinha> SKIP:
{
	"\n": DEFAULT
}
<ComentarioLinha> MORE:
{
<~ [ ] >
}
